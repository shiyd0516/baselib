apply plugin: 'maven-publish'

Properties properties = new Properties()
def file = new File(rootProject.projectDir, 'local.properties')
if (null != file && file.exists()) {
  properties.load(new FileInputStream(file))
}

def versionName = '1.0.0'
//指定快照版本 maven仓库url
def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
//指定正式版本 maven仓库url
def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'

//上传到Maven仓库的task
afterEvaluate {
  publishing {
    repositories {
      maven {
        //仓库默认不支持Https,所有这里设置成false.
        allowInsecureProtocol = false
        url = versionName.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          username = properties.getProperty('maven.username') //maven仓库账号
          password = properties.getProperty('maven.password') //maven仓库账号
        }
      }
    }
    publications {
      release(MavenPublication) {
        //添加这个，否则aar文件不上传
        artifact(tasks.getByName("bundleReleaseAar"))
        //artifact(androidJavadocsJar)
        artifact(androidSourcesJar)
        groupId = 'io.github.shiyd0516' // 唯一标识（通常为模块包名，也可以任意）
        artifactId = 'lib_img' // 项目名称（通常为类库模块名称，也可以任意）
        version = versionName // 版本号
      }
    }
  }
}

// 生成文档注释
task androidJavadocs(type: Javadoc) {
  // 设置源码所在的位置
  source = android.sourceSets.main.java.srcDirs
}

// 将文档打包成jar,生成javadoc.jar
task androidJavadocsJar(type: Jar) {
  // 指定文档名称
  archiveClassifier.set('javadoc')
  from androidJavadocs.destinationDir
}

// 将源码打包 ，生成sources.jar
task androidSourcesJar(type: Jar) {
  archiveClassifier.set('sources')
  from android.sourceSets.main.java.srcDirs
}

//配置需要上传到maven仓库的文件
artifacts {
  archives androidSourcesJar //将源码打包进aar,这样使用方可以看到方法注释.
  archives androidJavadocsJar //将注释打包进aar
}


